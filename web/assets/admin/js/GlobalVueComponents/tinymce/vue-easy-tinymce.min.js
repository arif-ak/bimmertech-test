/*!
 * vue-easy-tinymce v1.0.2
 * Copyright (c) 2018-present Mehdi Esmaeili (@m3esma)
 * Released under the MIT License.
 * Project: https://github.com/m3esma/vue-easy-tinymce
 */
Vue.component('tinymce', {
    template: `<div style="width: 100%" class="custom_editor">
                    <input @change="changeImage($event)" v-show="false" type="file" :id="inputId" />
                    <textarea :id="computedId" :value="value"></textarea>
                </div>`,
    props: {
        id: {
            type: String,
            default: "editor"
        },
        newPost: {
            type: Boolean,
            default: false
        },
        value: {
            default: ""
        },
        toolbar1: {
            default: 'undo redo | styleselect | bold italic strikethrough | forecolor backcolor | template link | bullist numlist | removeformat | alignleft aligncenter alignright | outdent indent code | style-p style-h1 style-h2 | customFrame customImg'
        },
        toolbar2: {
            default: ""
        },
        plugins: {
            default: function () {
                return [
                    'advlist autolink lists link charmap print textcolor',
                    'searchreplace visualblocks code',
                    'insertdatetime table contextmenu paste code directionality template colorpicker textpattern custom-iframe custom-img stylebuttons'
                ]
            },
            type: Array
        },
        other: {
            default: function () {
                return {
                    height: 500,
                    templates: [{
                            title: 'Template with image',
                            content: '<custom-img class="left" style="float: left; background-image: url(\'http://localhost:8000/media/image/39/c2/a54ba929da7af72637bf9bbff6a2.png\');" position="left" src="http://localhost:8000/media/image/39/c2/a54ba929da7af72637bf9bbff6a2.png" contenteditable="false"></custom-img><h5>Sub Header</h5><h2>Header</h2><p>Content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content</p>'
                        },
                        {
                            title: 'Template with video',
                            content: '<custom-iframe style="float: left;" src="https://www.youtube.com/embed/VTsmg2-oKUA" frameborder="0" width="560" height="315" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" position="left" contenteditable="false"></custom-iframe><h5>Sub Header</h5><h2>Header</h2><p>Content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content content</p>'
                        },
                    ],
                    paste_data_images: true,
                    extended_valid_elements: "custom-img[position|src|title|style|class|contenteditable|alt]," +
                        "custom-iframe[src|frameborder|style|scrolling|class|width|height|name|align|allowfullscreen|allow|position|title|contenteditable|alt]," +
                        "p[*]",
                    valid_elements: "custom-iframe," +
                        "custom-img," +
                        "@[id|class|style|title|dir<ltr?rtl|lang|xml::lang|onclick|ondblclick|onmousedown|onmouseup|onmouseover|onmousemove|onmouseout|onkeypress|onkeydown|onkeyup]," +
                        "a[rel|rev|charset|hreflang|tabindex|accesskey|type|name|href|target|title|class|onfocus|onblur]," +
                        "strong/b,em/i,strike,u,#p,-ol[type|compact]," +
                        "-ul[type|compact]," +
                        "-li,br,img[longdesc|usemap|src|border|alt=|title|hspace|vspace|width|height|align]," +
                        "-sub,-sup,-blockquote,-table[border=0|cellspacing|cellpadding|width|frame|rules|height|align|summary|bgcolor|background|bordercolor]," +
                        "-tr[rowspan|width|height|align|valign|bgcolor|background|bordercolor]," +
                        "tbody,thead,tfoot,#td[colspan|rowspan|width|height|align|valign|bgcolor|background|bordercolor|scope]," +
                        "#th[colspan|rowspan|width|height|align|valign|scope]," +
                        "caption,-div,-span,-code,-pre,address,-h1,-h2,-h3,-h4,-h5,-h6,-br,hr[size|noshade]," +
                        "-font[face|size|color]," +
                        "dd,dl,dt,cite,abbr,acronym,del[datetime|cite],ins[datetime|cite]," +
                        "object[classid|width|height|codebase|*],param[name|value|_value]," +
                        "embed[type|width|height|src|*]," +
                        "script[src|type]," +
                        "map[name]," +
                        "area[shape|coords|href|alt|target]," +
                        "bdo,button,col[align|char|charoff|span|valign|width]," +
                        "colgroup[align|char|charoff|span|valign|width]," +
                        "dfn,fieldset,form[action|accept|accept-charset|enctype|method]," +
                        "kbd,label[for]," +
                        "legend,noscript,optgroup[label|disabled]," +
                        "option[disabled|label|selected|value]," +
                        "q[cite]," +
                        "samp,select[disabled|multiple|name|size]," +
                        "small,",

                    // valid_child_elements: "custom-frame[img|span]",
                    // valid_children: '-custom-frame[#text], custom-img[#text]',
                    convert_urls: false,
                    content_css: '/assets/admin/css/editor.css',
                }
            },
            type: Object
        }
    },
    data: function () {
        return {
            objTinymce: null,
            inputId: 'editor_input_' + (Math.random().toString(36).substr(2, 9)),
            lastUploadedUrl: false,

            firstUpdateValue: true
        }
    },
    computed: {
        //for multi instance support
        computedId: function () {
            if (this.id === 'editor' || this.id === '' || this.id === null) {
                return 'editor-' + this.guidGenerator(); //put default value on computedId
            } else {
                return this.id;
            }
        }
    },
    mounted: function () {
        var that = this;
        EventBus.$on(this.inputId, data => {
            data.newImage.toBlob(function (blob) {
                var formData = new FormData();
                formData.append('image', blob);
                formData.append('id', false);
                that.loading = true;
                $('.mce-container.mce-panel.mce-floatpanel.mce-window.mce-in').addClass('bt-loading');
                that.$http.post('/admin/api2/media/photo/upload', formData)
                    .then(response => {
                        that.lastUploadedUrl = response.data.url;
                        EventBus.$emit("uploadedImage_" + that.id);
                        $('.mce-container.mce-panel.mce-floatpanel.mce-window.mce-in').removeClass('bt-loading');
                    }).catch(error => {
                        $('.mce-container.mce-panel.mce-floatpanel.mce-window.mce-in').removeClass('bt-loading');
                    })
            });
        });
        EventBus.$on('selectImageMediaLibrary', data => {
            that.lastUploadedUrl = data.imageUrl;
            EventBus.$emit("uploadedImage_" + data.id);
        });
        var initialOptions = {
            selector: 'textarea#' + this.computedId,
            target: this.$el,
            toolbar1: this.toolbar1,
            toolbar2: this.toolbar2,
            plugins: this.plugins,
            menubar: 'edit insert view format table',
            init_instance_callback: function (editor) {
                editor.on('Change KeyUp Undo Redo', function (n) {
                    that.objTinymce = editor
                    that.updateValue(editor.getContent())
                })
            },
            file_browser_callback: function (field_name, url, type, win) {
                $('#' + that.inputId).click();
                EventBus.$on("uploadedImage_" + that.id, function () {
                    win.document.getElementById(field_name).value = that.lastUploadedUrl;
                })
            },
        };
        var options = Object.assign({}, initialOptions, this.other);
        tinymce.PluginManager.add('custom-iframe', function (editor) {
            // Add a button that opens a window
            editor.addButton('customFrame', {
                text: 'VIdeo',
                icon: 'media',
                onPostRender: function () {
                    var _this = this; // reference to the button itself
                    editor.on('click', function () {
                        if (editor.selection.getNode().nodeName == 'CUSTOM-IFRAME') {
                            editor.selection.select(editor.selection.getNode());
                        }

                        _this.active(editor.selection.getNode().nodeName == 'CUSTOM-IFRAME');
                    })
                },
                onclick: function () {
                    function openWindowManager(edit = false) {
                        var link = '';
                        var align = 'left'
                        if (edit) {
                            link = editor.selection.getNode().getAttribute('src');
                            link = link.replace('https://www.youtube.com/embed', 'https://youtu.be');
                            align = editor.selection.getNode().getAttribute('position');
                        }
                        editor.windowManager.open({
                            title: 'Please, add URL for video',
                            body: [{
                                    type: 'textbox',
                                    name: 'link',
                                    label: 'URL',
                                    autofocus: true,
                                    value: link,
                                    classes: 'custom-textbox',
                                },
                                {
                                    type: 'listbox',
                                    name: 'align',
                                    label: 'Float',
                                    maxWidth: 200,
                                    classes: 'custom-listbox',
                                    values: [{
                                            text: 'Left',
                                            value: 'left',
                                            icon: 'icon dashicons-align-left',
                                        },
                                        {
                                            text: 'Right',
                                            value: 'right',
                                            icon: 'icon dashicons-align-right',
                                        },
                                        {
                                            text: 'Center',
                                            value: 'center',
                                            icon: 'icon dashicons-align-center',
                                        }
                                    ],
                                    onPostRender: function () {
                                        this.value(align);
                                    }
                                }
                            ],
                            width: 500,
                            height: 100,
                            onsubmit: function (e) {
                                var customTag;
                                var style = ""
                                if (e.data.align == 'center') {
                                    style = "margin: auto;"
                                }
                                if (e.data.align == 'left') {
                                    style = "float: left;"
                                }
                                if (e.data.align == 'right') {
                                    style = "float: right;"
                                }
                                if (edit) {
                                    var src = e.data.link
                                    src = src.replace('https://youtu.be', 'https://www.youtube.com/embed');
                                    customTag = editor.dom.create('custom-iframe', {
                                        src: src,
                                        width: "560",
                                        height: "315",
                                        frameborder: "0",
                                        allow: "accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",
                                        allowfullscreen: '',
                                        contenteditable: "false",
                                        style: style,
                                        position: e.data.align
                                    })
                                    editor.selection.getNode().parentNode.replaceChild(customTag, editor.selection.getNode());
                                } else {
                                    var src = e.data.link
                                    src = src.replace('https://youtu.be', 'https://www.youtube.com/embed');
                                    customTag = editor.dom.create('custom-iframe', {
                                        src: src,
                                        width: "560",
                                        height: "315",
                                        frameborder: "0",
                                        allow: "accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",
                                        allowfullscreen: '',
                                        contenteditable: "false",
                                        style: style,
                                        position: e.data.align
                                    })
                                    editor.selection.setNode(customTag);
                                    editor.selection.collapse(false);
                                }
                                //that.updateValue(editor.getContent())
                                editor.windowManager.close();
                                setTimeout(() => {
                                    editor.windowManager.close();
                                }, 100);
                            }
                        });
                    }
                    if (editor.selection.getNode().nodeName == 'CUSTOM-IFRAME') {
                        openWindowManager(true);
                        // editor.selection.getNode().remove();
                    } else {
                        openWindowManager();

                    }
                    this.active(false);
                }
            });
        });
        tinymce.PluginManager.add('custom-img', function (editor) {
            // Add a button that opens a window
            editor.addButton('customImg', {
                text: 'Image',
                icon: 'image',
                onPostRender: function () {
                    var _this = this; // reference to the button itself
                    editor.on('click', function () {
                        if (editor.selection.getNode().nodeName == 'CUSTOM-IMG') {
                            editor.selection.select(editor.selection.getNode());
                        }
                        _this.active(editor.selection.getNode().nodeName == 'CUSTOM-IMG');
                    })
                },
                onclick: function () {
                    function openWindowManager(edit = false) {
                        var link = '';
                        var align = 'left'
                        if (edit) {
                            link = editor.selection.getNode().getAttribute('src');
                            align = editor.selection.getNode().getAttribute('position');
                        }
                        editor.windowManager.open({
                            title: 'Please, add the Image',
                            body: [{
                                    type: 'textbox',
                                    name: 'link',
                                    label: 'URL',
                                    autofocus: true,
                                    value: link,
                                    classes: 'custom-textbox',
                                    onPostRender: function () {
                                        var _that = this;
                                        EventBus.$on("uploadedImage_" + that.id, function () {
                                            _that.value(that.lastUploadedUrl);
                                        })
                                    }
                                },
                                {
                                    type: 'listbox',
                                    name: 'align',
                                    label: 'Float',
                                    classes: 'custom-listbox',
                                    values: [{
                                            text: 'Left',
                                            value: 'left',
                                            icon: 'icon dashicons-align-left',
                                        },
                                        {
                                            text: 'Right',
                                            value: 'right',
                                            icon: 'icon dashicons-align-right',
                                        },
                                        {
                                            text: 'Center',
                                            value: 'center',
                                            icon: 'icon dashicons-align-center',
                                        }
                                    ],
                                    onPostRender: function () {
                                        this.value(align);
                                    }
                                },
                                {
                                    type: 'button',
                                    name: 'button',
                                    text: 'Upload Image',
                                    classes: 'widget btn primary first abs-layout-item custom-button',
                                    maxWidth: 150,
                                    onclick: function () {
                                        $('#' + that.inputId).click();
                                    },
                                },
                                {
                                    type: 'button',
                                    name: 'button',
                                    text: 'Media Library',
                                    classes: 'widget btn primary second abs-layout-item custom-button',
                                    maxWidth: 150,
                                    onclick: function () {
                                        EventBus.$emit("selectMediaLibraryImage", {
                                            id: that.id
                                        });
                                    },
                                },
                            ],
                            width: 500,
                            height: 175,
                            onsubmit: function (e) {
                                var customTag;
                                var style = ""
                                if (e.data.align == 'center') {
                                    style = "margin: auto; background-image: url(" + e.data.link + ");"
                                }
                                if (e.data.align == 'left') {
                                    style = "float: left; background-image: url(" + e.data.link + ");"
                                }
                                if (e.data.align == 'right') {
                                    style = "float: right; background-image: url(" + e.data.link + ");"
                                }

                                if (edit) {
                                    customTag = editor.dom.create('custom-img', {
                                        src: e.data.link,
                                        alt: e.data.alt,
                                        contenteditable: "false",
                                        position: e.data.align,
                                        style: style
                                    })
                                    editor.selection.getNode().parentNode.replaceChild(customTag, editor.selection.getNode());
                                } else {
                                    customTag = editor.dom.create('custom-img', {
                                        src: e.data.link,
                                        contenteditable: "false",
                                        position: e.data.align,
                                        alt: e.data.alt,
                                        class: e.data.align,
                                        style: style
                                    })
                                    editor.selection.setNode(customTag);
                                    editor.selection.collapse(false);
                                }
                                //that.updateValue(editor.getContent())
                                editor.windowManager.close();
                                setTimeout(() => {
                                    editor.windowManager.close();
                                }, 100);
                            }
                        });
                    }
                    if (editor.selection.getNode().nodeName == 'CUSTOM-IMG') {
                        openWindowManager(true);
                    } else {
                        openWindowManager();

                    }
                    this.active(false);
                }
            });
        });
        tinyMCE.PluginManager.add('stylebuttons', function (editor, url) {
            ['pre', 'p', 'code', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'].forEach(function (name) {
                editor.addButton("style-" + name, {
                    tooltip: "Toggle " + name.toUpperCase(),
                    text: name.toUpperCase(),
                    onClick: function () {
                        editor.execCommand('mceToggleFormat', false, name);
                    },
                    onPostRender: function () {
                        var self = this,
                            setup = function () {
                                editor.formatter.formatChanged(name, function (state) {
                                    self.active(state);
                                });
                            };
                        editor.formatter ? setup() : editor.on('init', setup);
                    }
                })
            });
        });
        tinymce.init(options)
    },

    methods: {
        guidGenerator: function () {
            function s4() {
                return Math.floor((1 + Math.random()) * 0x10000)
                    .toString(16)
                    .substring(1);
            }

            return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
                s4() + '-' + s4() + s4() + s4();
        },
        updateValue: function (value) {
            this.$emit('input', value);
        },

        changeImage: function (event) {
            var that = this;
            let file = event.target.files[0]

            EventBus.$emit("cropperFile", {
                aspectRatio: 'custom',
                file: file,
                EventName: that.inputId,
                inpId: that.inputId
            });
        },
    },

    watch: {
        value: function (newValue, oldValue) {
            var that = this;
            if (this.firstUpdateValue && !this.newPost) {
                setTimeout(() => {
                    tinymce.get(that.computedId).setContent(that.value);
                }, 1000);
                that.firstUpdateValue = false;
            } else {
                if (this.value !== this.objTinymce.getContent()) {
                    this.objTinymce.setContent(this.value);

                }
            }
        }
    }
});
"undefined" != typeof module && module.exports && (module.exports = VueEasyTinyMCE);